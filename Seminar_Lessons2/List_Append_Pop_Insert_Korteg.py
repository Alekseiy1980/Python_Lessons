# # list_1 = []                 # объявили лист
# # print(list_1)
# # for i in range(5):
# #     list_1.append((i))      #заполнение списка
# #     print(list_1)           #вывод списка
#
#
# '''
#     удаление последнего элемента списка
#  '''
#
# # list_1 = [12, 6, -1, 21, 0]
# # print(list_1.pop())
# # print(list_1)
# # print(list_1.pop())
# # print(list_1)
# # print(list_1.pop())
# # print(list_1)
#
# '''
# Удаление конкретного элемента из списка
# '''
# # list_1 = [12, 6, -1, 21, 0]
# # print(list_1.pop(0))      # пишим в круглых скобках в методе pop  ккой элемент из списка нужно затереть
# # print(list_1)
#
# '''
# добавление элемента на нужную позицию
# '''
# # list_1 = [12, 6, -1, 21, 0]
# # print(list_1.insert(2, 11)) # первый аргумент это позиция, второй аргумент это значение
# # print(list_1)
#
# '''
# срезы
# '''
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[0])
# print(list_1[2])
# print(list_1[len(list_1) - 1])  # считает с конца листа
# print(list[-5])                 # считает с конца листа
# print(list_1[:])                # выведит весь список
# print(list_1)                   # выведит весь список
# print(list_1[:2])               # начинаем с начала списка и завершаем (N - 1) - элементом
# print(list_1[len(list_1)-2:])   # c какого элемента начать выводить список
# print(list_1[2:9])              # с кокого элемента начинаем и каким элементом завершаем вывод
# print(list_1[6:18])             # с кокого элемента начинаем и каким элементом завершаем вывод
# print(list_1[0:len(list_1):6])  # c начала до конца с определенным шагом
# print(list_1[::6])              # c начала до конца с определенным шагом


'''
Кортежи
Кортед - это неизменяемый список

для чего они нужны, если их нельзя изменить?
В случае защиты каких-либо данных от изменений( намеренных или случайных)
Кортеж занимает меньше места в памяти и работает быстрее, по сравнению со списками
типо в них записывать пароли
'''
# t = ()          #создание пустого кортежа
# print(type(t))  #class <'typle'>
# t = (1.)
# print(type(t))
# t = (1)
# print(type(t))
# t = (28, 9, 1990,)  #кортеж
# print(type(t))
#
# v = [1, 5, 8]  #лист
# print(v)
# print(type(v))
#
# v = tuple(v)    # лист преобразование в кортеж
# print(v)
# print(type(v))
#
# a,b = 1,2       # множественное присваивание
# c = d = 1
#
# print(f' a = {a}, b = {b}, c = {c}, d = {d}')
# a, b, c = v     # распаковка кортежа
# print(f' a = {a}, b = {b}, c = {c}')
#
# '''
# Вывод кортежей
# '''
# t = (1, 2, 3, 4, 7,)
# print(t)
# for i in t:
#     print(i)
#
# print(t)
# for i in range(len(t)):     # так можно и со списками работать
#     print(t[i])

'''
Словари - неупорядоченные коллекции произвольных обьектов с доупом по ключу
В списках в качестве ключа используется индекс элемента.
В словаре для определения элемента используется значения ключа(строка, число).
'''
dictionery = {}     # создали пустой словарь

dictionery = {'up': 'w', 'left': 'a', 'down': 's', 'right': 'd'}
print(dictionery['left'])
print(dictionery['up'])
dictionery['left'] = '<='
print(dictionery['left'])
# print(dictionery['type'])
del dictionery['left']
for item in dictionery:     # вывод словаря
    print('{}: {}' .format(item, dictionery[item]))
dictionery[678] = 7654654       # добавили ключ и значение
for(k,v) in dictionery.items():     # вывод словаря
    print(k, v)
print(dictionery)
d = dict()          # создали пустой словарь
d['q'] = 'qwerty'   # записали в словарь
print(d)            # вывели словарь
d['w'] = 'werty'    # добавили ключ и значение
print(d)
print(d['q'])
print(dictionery.items()) # Вывод словаря, содержащий список элемент - картежей, и хронящий два значения( ключ и значения)
